I"0/<p>애초에 DP를 너무너무너무 못하는지라 참 쓰기가 뭐하지만 
대표적인 비트마스킹 DP문제가 있습니다</p>

<p><a href="https://www.acmicpc.net/problem/2098">https://www.acmicpc.net/problem/2098</a></p>

<p>문제를 요약하면, 1번마을에서 시작해서 다시 1번마을까지 돌아오는데, 최소 비용을 출력하는 문제이다</p>

<p>​근데 문제를 보면, n 사이즈가 16이다.</p>

<p>​우선은 일반적으로 생각을 해보면 아 1번 마을에서 시작해서 다음 마을로 가는 경우의수가 15가지이고, 그다음은 14가지, … 1가지</p>

<p>이렇게 되니까 15! 즉 O(n!)의 시간이 나오네, 한번 해볼까해서 계산을 해보는데, 15!이 생각보다 너무 큰숫자임을 깨닫고,</p>

<p>이게 아니라면 어떻게 풀어야 할까라는 생각을 하는 순간, 이것을 그냥 완탐이 아니라, DP로 한번 접근을 해보면 어떨까 라고 생각을 해보면 어떨까라는 문제이다</p>

<p>사실 DP로 접근이라기보다는 DP의 메모이제이션 특성을 가져온다고 보는게 정확하다고 생각을 한다</p>

<p>그러면 이 문제는 어떻게 메모이제이션을 할것인가? 라는 생각에 휩싸이는데,
이렇게 한번 정의를 내려보면 어떨까 라는 생각이 든다
<strong>dp[here][via]: here라는 정점에서 via를 통해 오는 최소 비용</strong> 이라고 정의를 해본다</p>

<p>via가 무슨 말일지 모를 수 있는데, via를 비트마스킹을 통해 접근을 할것이다</p>

<p>1에서 4로 가는 방법이</p>

<p>1 3 4, 1 2 4, 1 2 3 4가 있다고 할때</p>

<p>via는 1 3 4의 경우는 1을 방문하고,3을 방문하고, 4를 방문하기 때문에 2^1+2^3+2^4 값일 것이다
똑같이 1 2 4의 경우는 2^1+2^3+2^4가 채워진다고 보면된다
비트마스킹을 하도 못하는 지라 이 정도만 간략하게 설명을 하도록 하겠습니다 ㅠㅠ</p>

<p>​어쨌든 완전 탐색을 진행하면서, DP의 메모이제이션을 활용하여 최소 비용을 계속 갱신시켜주면 되는 문제입니다</p>

<p>그다음 모든 지점을 다 간다면 비트가 전부다 채워질 것이기 때문에,</p>

<p>종료 조건은 <strong>via==(1«n)-1일때, 그 here위치에서 1번까지 가는 길이 있을때 그값까지 전달을 해준다면 될것 입니다</strong>
문제가 좀 어려우니 코드를 보면서 진행하겠습니다</p>

<h3 id="by-c">by C++</h3>
<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include &lt;cstdio&gt;
#include &lt;algorithm&gt;
#include &lt;cstring&gt;
#include &lt;vector&gt;
#include &lt;queue&gt;
#include &lt;map&gt;
#include &lt;iostream&gt;
#include &lt;string&gt;
#include &lt;math.h&gt;
#include &lt;set&gt;
#include &lt;list&gt;
#include &lt;climits&gt;
#include &lt;string.h&gt;
#include &lt;deque&gt;
#include &lt;functional&gt;
#include &lt;stack&gt;
</span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
<span class="k">typedef</span> <span class="kt">long</span> <span class="kt">long</span> <span class="n">ll</span><span class="p">;</span>
<span class="cp">#define INF 1000000000
</span><span class="k">typedef</span> <span class="n">pair</span><span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span> <span class="kt">int</span><span class="o">&gt;</span> <span class="n">P</span><span class="p">;</span>
<span class="k">typedef</span> <span class="n">pair</span><span class="o">&lt;</span><span class="n">pair</span><span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span> <span class="kt">int</span><span class="o">&gt;</span><span class="p">,</span> <span class="kt">int</span><span class="o">&gt;</span> <span class="n">PP</span><span class="p">;</span>
<span class="k">typedef</span> <span class="n">pair</span><span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span> <span class="n">pair</span><span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span> <span class="kt">int</span><span class="o">&gt;&gt;</span> <span class="n">PPP</span><span class="p">;</span>
<span class="kt">int</span> <span class="n">gox</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span> <span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span> <span class="p">};</span>
<span class="kt">int</span> <span class="n">goy</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span> <span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span> <span class="p">};</span>
<span class="kt">int</span> <span class="n">dp</span><span class="p">[</span><span class="mi">17</span><span class="p">][</span><span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="mi">17</span><span class="p">];</span>
<span class="kt">int</span> <span class="n">n</span><span class="p">;</span>
<span class="kt">int</span> <span class="n">board</span><span class="p">[</span><span class="mi">17</span><span class="p">][</span><span class="mi">17</span><span class="p">];</span>
<span class="kt">int</span> <span class="nf">go</span><span class="p">(</span><span class="kt">int</span> <span class="n">here</span><span class="p">,</span> <span class="kt">int</span> <span class="n">via</span><span class="p">)</span> <span class="p">{</span>
	<span class="k">if</span> <span class="p">(</span><span class="n">via</span> <span class="o">==</span> <span class="p">(</span><span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="n">n</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span> <span class="c1">// 종료조건(전부다 방문을 했을때)</span>
		<span class="k">if</span> <span class="p">(</span><span class="n">board</span><span class="p">[</span><span class="n">here</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="k">return</span> <span class="n">INF</span><span class="p">;</span> <span class="c1">// 원래 시작점으로 돌아갈수 없다면 불가능</span>
		<span class="k">else</span> <span class="k">return</span> <span class="n">board</span><span class="p">[</span><span class="n">here</span><span class="p">][</span><span class="mi">0</span><span class="p">];</span> <span class="c1">// 돌아갈수있다면 그 가중치를 전달</span>
	<span class="p">}</span>
	<span class="kt">int</span> <span class="o">&amp;</span><span class="n">ret</span> <span class="o">=</span> <span class="n">dp</span><span class="p">[</span><span class="n">here</span><span class="p">][</span><span class="n">via</span><span class="p">];</span>
	<span class="k">if</span> <span class="p">(</span><span class="n">ret</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="k">return</span> <span class="n">ret</span><span class="p">;</span>
	<span class="n">ret</span> <span class="o">=</span> <span class="mf">1e9</span><span class="p">;</span>
	<span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
		<span class="kt">int</span> <span class="n">next</span> <span class="o">=</span> <span class="n">i</span><span class="p">;</span>
		<span class="k">if</span> <span class="p">(</span><span class="n">board</span><span class="p">[</span><span class="n">here</span><span class="p">][</span><span class="n">next</span><span class="p">]</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="k">continue</span><span class="p">;</span> <span class="c1">// here에서 next로 가는 길이 없다면 갈수가 없다</span>
		<span class="k">if</span> <span class="p">(</span><span class="n">here</span> <span class="o">!=</span> <span class="n">next</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="p">(</span><span class="n">via</span> <span class="o">&amp;</span> <span class="p">(</span><span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="n">i</span><span class="p">)))</span> <span class="p">{</span>
			<span class="n">ret</span> <span class="o">=</span> <span class="n">min</span><span class="p">(</span><span class="n">ret</span><span class="p">,</span> <span class="n">go</span><span class="p">(</span><span class="n">next</span><span class="p">,</span> <span class="n">via</span> <span class="o">|</span> <span class="p">(</span><span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="n">i</span><span class="p">))</span> <span class="o">+</span> <span class="n">board</span><span class="p">[</span><span class="n">here</span><span class="p">][</span><span class="n">next</span><span class="p">]);</span> <span class="c1">// 방문 할때마다 가중치를 누적해준다</span>
		<span class="p">}</span>
	<span class="p">}</span>
	<span class="k">return</span> <span class="n">ret</span><span class="p">;</span>
<span class="p">}</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
	<span class="n">scanf</span><span class="p">(</span><span class="s">"%d"</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">n</span><span class="p">);</span>
	<span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
		<span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
			<span class="n">scanf</span><span class="p">(</span><span class="s">" %d"</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">board</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]);</span>
		<span class="p">}</span>
	<span class="p">}</span>
	<span class="n">memset</span><span class="p">(</span><span class="n">dp</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">dp</span><span class="p">));</span>
	<span class="n">printf</span><span class="p">(</span><span class="s">"%d</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">go</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">));</span> <span class="c1">// 시작점이 0번지점이므로 2^0인 1을 채우고 시작해야한다</span>
	<span class="k">return</span> <span class="mi">0</span><span class="p">;</span>

<span class="p">}</span>
</code></pre></div></div>
:ET