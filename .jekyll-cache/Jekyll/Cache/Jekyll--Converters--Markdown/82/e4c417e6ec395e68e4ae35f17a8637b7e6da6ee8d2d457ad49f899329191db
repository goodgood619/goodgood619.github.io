I"}#<h2 id="stream">Stream</h2>

<p>Stream : 자바 8부터 추가된 컬렉션(배열 포함)의 저장 요소를 하나씩 참조해서 <span style="color:red"><strong>람다식으로 처리할 수 있도록 해주는 반복자</strong></span></p>

<ol>
  <li>내부 반복자를 사용하므로 병렬 처리가 쉽다</li>
</ol>

<p><img src="/assets/스트림내부반복자.png" alt="스트림내부반복자" /></p>

<p><img src="/assets/스트림내부반복자2.png" alt="스트림내부반복자2" /></p>

<p>내부 반복자들은 멀티 코어 CPU를 활용하기 위해 요소들을 분배시켜 병렬 작업을 할 수있게 도와준다는 특징이 있다.</p>

<ol>
  <li>중간 처리와 최종 처리 작업을 수행한다</li>
</ol>

<p><img src="/assets/중간처리최종처리.png" alt="중간처리최종처리" /></p>

<p>위의 그림처럼 중간처리에서 학생의 개별점수를 뽑아내고, 또다른 어떤 작업을 처리한 후 최종 처리를 할수도 있다</p>

<ol>
  <li>람다식으로 요소 처리 코드를 제공한다 → 람다식 or 메소드 참조를 이용해 요소 처리 내용을 매개값으로 전달이 가능함</li>
</ol>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">List</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">list</span> <span class="o">=</span> <span class="nc">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span><span class="mi">2</span><span class="o">,</span><span class="mi">3</span><span class="o">,</span><span class="mi">4</span><span class="o">,</span><span class="mi">5</span><span class="o">,</span><span class="mi">6</span><span class="o">);</span>
<span class="nc">Stream</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">stream</span> <span class="o">=</span> <span class="n">list</span><span class="o">.</span><span class="na">stream</span><span class="o">();</span>
<span class="n">stream</span><span class="o">.</span><span class="na">forEach</span><span class="o">(</span><span class="n">s</span><span class="o">-&gt;</span><span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">s</span><span class="o">));</span> <span class="c1">// 매개값인 s로 가능함</span>
</code></pre></div></div>

<ol>
  <li>그리고 스트림은 중간 처리와 최종 처리를 파이프라인으로 해결한다. 파이프라인은 여러 개의 스트림이 연결되어 있는 구조를 말한다</li>
</ol>

<p><img src="/assets/중간처리최종처리예제.png" alt="중간처리최종예제" /></p>

<p>그리고 이것을 코드로 표현을 해보면 이렇게 표현이 된다</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">double</span> <span class="n">ageAvg</span> <span class="o">=</span> <span class="n">list</span><span class="o">.</span><span class="na">stream</span><span class="o">()</span> <span class="c1">// 오리지널 스트림</span>
								<span class="o">.</span><span class="na">filter</span><span class="o">(</span><span class="n">m</span><span class="o">-&gt;</span><span class="n">m</span><span class="o">.</span><span class="na">getSex</span><span class="o">()</span> <span class="o">==</span> <span class="nc">Member</span><span class="o">.</span><span class="na">MALE</span><span class="o">)</span> <span class="c1">//중간처리</span>
								<span class="o">.</span><span class="na">mapToInt</span><span class="o">(</span><span class="nl">Member:</span><span class="o">:</span><span class="n">getAge</span><span class="o">)</span> <span class="c1">// 중간처리</span>
								<span class="o">.</span><span class="na">average</span><span class="o">()</span> <span class="c1">//최종처리</span>
								<span class="o">.</span><span class="na">getAsDouble</span><span class="o">();</span>

</code></pre></div></div>

<p>이처럼 스트림은 다음과 같은 4가지의 특징을 지니고 있다. 다음은 주로 쓰이는 메소드들에 대해서 살펴보도록 하겠다.</p>

<p><img src="/assets/스트림메소드.png" alt="Stream Method" /></p>

<p>우선은 기본적으로 주로 쓰이는 메소드들을 써보았다. Stream의 collect()메소드는 경우도 많고, 내용도 어려우니, 우선은 다음번에 따로 제대로 이해해서 작성을 하도록 하겠습니다.</p>

<p>map과 flatMap메소드의 차이점은 map의 경우는 <span style="color:red">타입 파라미터로 주어진 요소들을 하나씩 그대로 일대일로 매핑하여 그 결과를 하나의 스트림으로 리턴을 하는것</span>이고, 반면에 flatMap 같은 경우는 <span style="color:blue">주어진 요소들을 하나씩 Stream<R> 타입으로 전환이 되는 것이다. 그리고 그것들을 합쳐서 최종적으로 하나의 스트림으로 리턴을 하는것&lt;/span&gt;이다.</R></span></p>

<p>그래서 결과적으로는 차이가 안날수도 있다. 그러나 flatMap의 경우는 n차원배열을 처리할때 상당히 효과적일수 있다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">String</span><span class="o">[][]</span> <span class="n">data</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">String</span><span class="o">[][]{</span> <span class="o">{</span><span class="s">"1"</span><span class="o">,</span> <span class="s">"2"</span><span class="o">},</span> <span class="o">{</span><span class="s">"3"</span><span class="o">,</span> <span class="s">"4"</span><span class="o">}</span> <span class="o">};</span>

<span class="nc">Stream</span><span class="o">&lt;</span><span class="nc">Stream</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;&gt;</span> <span class="n">map</span> <span class="o">=</span> <span class="nc">Arrays</span><span class="o">.</span><span class="na">stream</span><span class="o">(</span><span class="n">data</span><span class="o">).</span><span class="na">map</span><span class="o">(</span><span class="n">x</span> <span class="o">-&gt;</span> <span class="nc">Arrays</span><span class="o">.</span><span class="na">stream</span><span class="o">(</span><span class="n">x</span><span class="o">));</span>
<span class="n">map</span><span class="o">.</span><span class="na">forEach</span><span class="o">(</span><span class="n">s</span> <span class="o">-&gt;</span> <span class="n">s</span><span class="o">.</span><span class="na">forEach</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">::</span><span class="n">println</span><span class="o">));</span>

<span class="nc">Stream</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">flatmap</span> <span class="o">=</span> <span class="nc">Arrays</span><span class="o">.</span><span class="na">stream</span><span class="o">(</span><span class="n">data</span><span class="o">).</span><span class="na">flatMap</span><span class="o">(</span><span class="n">x</span> <span class="o">-&gt;</span> <span class="nc">Arrays</span><span class="o">.</span><span class="na">stream</span><span class="o">(</span><span class="n">x</span><span class="o">));</span>
<span class="n">flatmap</span><span class="o">.</span><span class="na">forEach</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">::</span><span class="n">println</span><span class="o">);</span>
</code></pre></div></div>

<p>collecct()메소드는 <strong>스트림의 최종처리 메소드로서, 필요한 요소만 컬렉션으로 담거나, 요소들을 그룹핑을 해서 집계(reduction)을 할수 있는 기능을 제공</strong>한다.</p>

<p>기본적으로 대표적인 메소드를 써보면</p>

<p><img src="/assets/스트림콜렉트.png" alt="Stream collect" /></p>

<p>그리고 마지막으로 병렬처리를 하는데 도움을 주는 메소드들이 존재한다.</p>

<p><img src="/assets/스트림병렬.png" alt="Stream Parallel" /></p>

<p>위처럼 병렬처리 메소드를 실행을 할 경우에는, 각자 개발 환경에 맞는 코어CPU에 맞게 요소를 나누어서, 각각의 나누어진 요소들을 분리된 스레드에서 병렬처리를 한다. 예를 들면, 듀얼 코어(Dual Core)의 경우 2개의 요소들로 나누어져, 2개의 스레드가 병렬처리를 한다고 생각하면된다.</p>

<p>위와 관련한 모든 예제들은 아래 링크 주소에 있으니 참고해주시면 감사하겠습니다.<br />
<a href="https://github.com/goodgood619/ThisIsJava">https://github.com/goodgood619/ThisIsJava</a></p>
:ET