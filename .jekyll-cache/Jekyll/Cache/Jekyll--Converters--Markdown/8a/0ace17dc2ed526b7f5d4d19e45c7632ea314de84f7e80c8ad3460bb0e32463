I"I<h2 id="java-장단점-및-특징-정리">Java 장단점 및 특징 정리</h2>

<h3 id="장점">장점</h3>

<hr />

<ol>
  <li>객체 지향 언어로서 클래스 계층 구조, 상속성, 다형성, 캡슐화 등을 지원</li>
  <li>멀티 스레드
    <ul>
      <li>C,C++ 많은 언어들은 자체적으로 멀티 스레드를 지원하지 않고, 운영체제의 도움을 받음</li>
      <li>반면 자바의 경우는 운영체제 도움 없이 독립적으로 실행이 가능하다 함!!</li>
    </ul>
  </li>
  <li>플랫폼 독립성
    <ul>
      <li>하드웨어, 운영체제 등 플랫폼에 종속되지 않는 독립적인 바이트 코드로 컴파일됨</li>
      <li>자바 가상 머신(JVM)만 있으면 하드웨어 운영체제와 상관없이 자바 프로그램 실행 가능</li>
    </ul>
  </li>
</ol>

<h3 id="단점">단점</h3>

<hr />

<ol>
  <li>예외 처리
    <ul>
      <li>프로그램 발생 시 발생 할수 있는 예외들을 개발자가 직접 처리해야 한다. 그렇지 않으면 아예 컴파일이 안됨</li>
    </ul>
  </li>
  <li>컴파일 단계에서 속도가 느림
    <ul>
      <li>JVM에 의해 기계어로 번역되고 실행되는 과정을 거쳐서, 컴파일되자마자 기계어로 변환되는 C,C++에 비하면 속도가 현저히 떨어진다</li>
      <li>그러나 요즘은 바이트 코드를 기계어로 변환해주는 JIT컴파일러 적용 기술의 발전으로 인해, 그 차이가 많이 줄어들었다고는 한다</li>
    </ul>
  </li>
</ol>

<h3 id="특징">특징</h3>

<hr />

<h3 id="실행-모듈">실행 모듈</h3>
<ul>
  <li>자바 응용 프로그램은 한 개의 클래스 파일 또는 다수의 클래스 파일로 구성됨</li>
  <li>자바의 실행은 main 메소드에서 시작되며, 오직 한 개의 main 메소드를 가져야 하지만</li>
  <li>다수의 클래스 파일이 각각 main 메소드를 가질수 있다!</li>
</ul>

<hr />

<h3 id="캡슐화">캡슐화</h3>
<ul>
  <li>자바는 객체지향 언어의 캡슐화(encapsulation)을 지켜 <strong>변수나 메소드는 반드시 클래스 내</strong>에 구현되어야 한다</li>
  <li>그래서 클래스에 속하지 않는 변수나 메소드는 존재 불가능!</li>
  <li>클래스 내에 또다른 클래스를 만들수 있다</li>
</ul>

<hr />

<h3 id="패키지">패키지</h3>
<ul>
  <li>서로 관련 있는 클래스들을 패키지로 묶어 관리할수있다, 마치 파일시스템과 유사함</li>
  <li>예를 들어, java.lang.System Class는 java\lang 폴더의 System.class 파일을 나타내고, java.lang을 패키지라 한다</li>
</ul>

<hr />

<h3 id="gcgarbage-collector">GC(Garbage Collector)</h3>

<ul>
  <li>사용하지 않는 객체는 자동적으로 GC에 의해 인식되어 자원을 반납합</li>
  <li>프로그램이 동적으로 할당했던 메모리 영역 중에서 필요없게 된 자원을 해제하는 기능</li>
  <li><strong>Reference Counting</strong>기법을 이용함</li>
</ul>

<hr />
<h4 id="장점-1">장점</h4>
<ul>
  <li>메모리 누수(memory leak)를 막을수 있다.</li>
  <li>이중 해제(이미 해제된 메모리를 또 해제하는 것)을 막을 수 있다</li>
  <li>유효하지 않은 포인터에 대한 접근을 막을 수 있음(이미 해제된 메모리에 접근)
    <h4 id="단점-1">단점</h4>
  </li>
  <li>어떤 메모리를 해제해야 할지 결정하는데 비용이 든다</li>
  <li>쓰레기 수집을 일어나는 타이밍을 예측하기 어렵다</li>
  <li>할당된 메모리가 해제된 지점을 알 수가 없다</li>
</ul>

<hr />
<h3 id="풍부한-오픈소스-라이브러리">풍부한 오픈소스 라이브러리</h3>
<ul>
  <li>오픈 소스로 이루어져있기에, 라이브러리가 굉장히 많음</li>
  <li>즉, 여러 라이브러리 들을 이용해 개발 시간을 줄일수 있다</li>
</ul>

<hr />

<h3 id="동적-로딩">동적 로딩</h3>
<ul>
  <li>미리 객체를 만드는 것이 아니라 필요한 시점에 만들 수 있다</li>
</ul>

<hr />

<h3 id="함수-스타일-코딩-지원">함수 스타일 코딩 지원</h3>
<ul>
  <li>자바 8부터 함수적 프로그래밍을 위해 람다식 지원함</li>
</ul>

<hr />

<h3 id="소스와-클래스-파일">소스와 클래스 파일</h3>
<ul>
  <li>하나의 자바 소스 파일에 여러개의 클래스를 작성한 경우, 컴파일하면 클래스마다 별도의 클래스 파일들이 생성된다</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">A</span> <span class="o">{</span>

<span class="o">...</span>
<span class="o">}</span>
<span class="kd">class</span> <span class="nc">B</span> <span class="o">{</span>
<span class="o">...</span>
<span class="o">}</span>
<span class="kd">class</span> <span class="nc">C</span> <span class="o">{</span>
<span class="o">...</span>
	<span class="kd">class</span> <span class="nc">D</span> <span class="o">{</span>
		<span class="o">...</span>
	<span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>이 경우 A.class, B.class , C.class , 그리고 C$D.class가 생성된다.<br />
D class는 C Class의 inner class 이다<br />
그리고 <strong>하나의 자바 소스 파일에 작성된 클래스 중 오직 한 클래스만 public으로 선언</strong>이 되어있어야함!!<br />
그리고 그 public으로 선언된 클래스 파일이름과 자바 소스 파일이 일치해야한다</p>

<hr />

<h3 id="접근-지정자">접근 지정자</h3>
<ul>
  <li>private : 클래스내에서만 가능</li>
  <li>default : 클래스내 + 동일 패키지</li>
  <li>protected : 클래스내 + 동일 패키지 + 하위클래스</li>
  <li>public : 모든곳 가능</li>
</ul>

<blockquote>
  <p>기본값은 default 접근 지정자 같다</p>
</blockquote>

<hr />

<h3 id="area">Area</h3>
<ul>
  <li>stack area : 함수 호출 시 생성되는 지역변수나 매개변수가 저장되는 영역,<br />
함수 호출이 완료되면 사라진다는 특징을 지님</li>
  <li>heap area : 프로그래머가 동적으로 할당된 메모리, 런타임시(프로그램이 실행되는 동안) 결정됨</li>
  <li>Data area : 전역변수 , static 변수가 할당되는 곳
여기서 잠깐
    <h4 id="전역-변수global-variable와-정적변수static-variable의-차이">전역 변수(global variable)와 정적변수(static variable)의 차이?</h4>
  </li>
  <li>해당 프로그램이 죽을 때까지 한번 할당된 변수 메모리와 값은 유지</li>
  <li>scope가 다르다는 것이 차이</li>
</ul>

<p>전역변수는 해당 프로그램의 어디든 가능!!<br />
그러나 정적 변수는 변수가 선언된 파일이나 함수 내에서만 접근 가능<br />
예를 들면, class A의 static variable은 class B로 접근이 불가</p>

<hr />

:ET