I"3<p>이 문제는 <strong>postorder의 순회방법을 거꾸로 탐색</strong>해서 만드는 문제이다.</p>

<p>postorder는 왼쪽,오른쪽,현재위치를 순서로 탐색한다.</p>

<p>이걸 반대로 하면, <strong>현재위치,오른쪽,왼쪽 순서</strong>로 진행을 할수 있게된다.</p>

<p>반대로 하기때문에, postorder값을 이용해 반대로 값을 넣어주면서, <strong>오른쪽자식부터 먼저 Tree를 만들면서</strong> 진행을 하면된다.<br />
그리고 <strong>inorder를 통해서 현재 index의 위치를 알아야 한다</strong></p>

<p>순서를 보면, 맨처음에 루트노드를 먼저 만들게 되는데, postorder의 맨마지막 방문은 루트노드이기때문이다.
이때, 오른쪽부터 먼저 만들어줘야하는데, inorder로부터 인덱스를 (key,value)로 만들게 되면,<br />
현재 루트노드의 인덱스를 알게되고, 오른쪽자식, 왼쪽자식을 이동할때, 정확하게 값을 넣어줄수있게만들어준다
왜냐하면, inorder의 방문순서는 현재위치의 인덱스를 알게될경우, <strong>그 위치의 인덱스보다 작으면 모두 왼쪽자식들의 원소들을 가리키게되고</strong><br />
<strong>반대로 크면 모두 오른쪽자식들을 가리키게 되기때문이다.</strong> 코드를 보면 직관적으로 알수있을것같다.</p>
<h2 id="by-java">by Java</h2>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cm">/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */</span>
<span class="kd">class</span> <span class="nc">Solution</span> <span class="o">{</span>
    <span class="kt">int</span> <span class="n">postIndex</span><span class="o">;</span>
    <span class="kd">public</span> <span class="nc">TreeNode</span> <span class="nf">buildTree</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">inorder</span><span class="o">,</span> <span class="kt">int</span><span class="o">[]</span> <span class="n">postorder</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">Map</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">,</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">map</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">HashMap</span><span class="o">&lt;&gt;();</span>
        <span class="n">postIndex</span> <span class="o">=</span> <span class="n">inorder</span><span class="o">.</span><span class="na">length</span><span class="o">-</span><span class="mi">1</span><span class="o">;</span>
        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;=</span><span class="n">postIndex</span><span class="o">;</span><span class="n">i</span><span class="o">++)</span> <span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">inorder</span><span class="o">[</span><span class="n">i</span><span class="o">],</span><span class="n">i</span><span class="o">);</span>
        <span class="k">return</span> <span class="nf">traverse</span><span class="o">(</span><span class="n">inorder</span><span class="o">,</span><span class="n">postorder</span><span class="o">,</span><span class="mi">0</span><span class="o">,</span><span class="n">postIndex</span><span class="o">,</span><span class="n">map</span><span class="o">);</span>
    <span class="o">}</span>
    <span class="kd">private</span> <span class="nc">TreeNode</span> <span class="nf">traverse</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">inorder</span><span class="o">,</span><span class="kt">int</span><span class="o">[]</span> <span class="n">postorder</span><span class="o">,</span><span class="kt">int</span> <span class="n">start</span><span class="o">,</span><span class="kt">int</span> <span class="n">end</span><span class="o">,</span> <span class="nc">Map</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">,</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">map</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">if</span><span class="o">(</span><span class="n">start</span><span class="o">&gt;</span><span class="n">end</span> <span class="o">||</span> <span class="n">postIndex</span><span class="o">&lt;</span><span class="mi">0</span><span class="o">)</span> <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
        <span class="nc">TreeNode</span> <span class="n">root</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">TreeNode</span><span class="o">(</span><span class="n">postorder</span><span class="o">[</span><span class="n">postIndex</span><span class="o">--]);</span>
        <span class="kt">int</span> <span class="n">curIndex</span> <span class="o">=</span> <span class="n">map</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">root</span><span class="o">.</span><span class="na">val</span><span class="o">);</span>
        <span class="n">root</span><span class="o">.</span><span class="na">right</span> <span class="o">=</span> <span class="n">traverse</span><span class="o">(</span><span class="n">inorder</span><span class="o">,</span><span class="n">postorder</span><span class="o">,</span><span class="n">curIndex</span><span class="o">+</span><span class="mi">1</span><span class="o">,</span><span class="n">end</span><span class="o">,</span><span class="n">map</span><span class="o">);</span> <span class="c1">// 현재루트노드의 인덱스 다음 ~ 끝인덱스(Inorder)</span>
		<span class="n">root</span><span class="o">.</span><span class="na">left</span> <span class="o">=</span> <span class="n">traverse</span><span class="o">(</span><span class="n">inorder</span><span class="o">,</span><span class="n">postorder</span><span class="o">,</span><span class="n">start</span><span class="o">,</span><span class="n">curIndex</span><span class="o">-</span><span class="mi">1</span><span class="o">,</span><span class="n">map</span><span class="o">);</span>        
		<span class="k">return</span> <span class="n">root</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
:ET