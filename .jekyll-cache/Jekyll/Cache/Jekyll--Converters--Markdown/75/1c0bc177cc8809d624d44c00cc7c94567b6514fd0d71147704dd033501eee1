I"<h2 id="java-generic-관련-정리">Java Generic 관련 정리</h2>

<p>왜 제네릭을 사용해야 하는가?</p>

<ol>
  <li><strong>컴파일 시 강한 타입 체크</strong>를 할 수 있다. 실행 시 타입 에러가 나는 것보다는 컴파일 시에 미리 타입을 강하게 체크를 해서 에러를 사전에 방지하기 위함</li>
  <li><strong>타입 변환(casting)을 제거</strong>한다. 비제네릭 코드는 불필요한 타입 변환을 하기 때문에, 프로그램 성능에 악영향을 미친다. 요소를 찾아 올때, 반드시 String으로 타입 변환을 해야 한다.</li>
</ol>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">List</span> <span class="n">list</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">();</span> <span class="c1">// 제네릭을 사용하지 않았음 </span>
<span class="n">lisd</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">"hello"</span><span class="o">);</span>
<span class="nc">String</span> <span class="n">str</span> <span class="o">=</span> <span class="o">(</span><span class="nc">String</span><span class="o">)</span> <span class="n">list</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="mi">0</span><span class="o">);</span> <span class="c1">// String으로 casting(타입변환)을 해야함</span>

<span class="nc">List</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">list</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;();</span> <span class="c1">// new ArrayList&lt;String&gt;에서 String은 생략 가능하다. List&lt;String&gt;으로 부터 추론이 가능하기 때문에, 컴파일러가 자동으로 인식해줌</span>
<span class="n">list</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">"hello"</span><span class="o">);</span>
<span class="nc">String</span> <span class="n">str</span> <span class="o">=</span> <span class="n">list</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="mi">0</span><span class="o">);</span> <span class="c1">// 타입 변환을 하지 않음</span>

<span class="c1">//public class 클래스명&lt;T&gt; {...}</span>
<span class="c1">//public interface 인터페이스명&lt;T&gt; {...}</span>
</code></pre></div></div>

<p>제네릭 메소드(Generic method) : &lt;T,R&gt; R method(T t) 의 형태</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="o">&lt;</span><span class="n">타입파라미터</span><span class="o">,...&gt;</span> <span class="n">리턴타입</span> <span class="n">메소드명</span><span class="o">(</span><span class="n">매개변수</span><span class="o">,</span> <span class="o">...)</span> <span class="o">{...}</span>
<span class="kd">public</span> <span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="nc">Box</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="nf">boxing</span><span class="o">(</span><span class="no">T</span> <span class="n">t</span><span class="o">)</span> <span class="o">{...}</span>
</code></pre></div></div>

<p>제한된 타입 파라미터(<T extends="" 최상위타입="">) : 타입 파라미터(T)에 지정되는 구체적인 타입을 제한할 필요가 종종 있을 수 있다.</T></p>

<p>ex) 숫자를 연산하는 제네릭 메소드는 매개값으로 Number 타입 or 하위 클래스 타입(Byte, Short, Integer,Long, Double)의 인스턴스만 가져야 함</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="o">&lt;</span><span class="no">T</span> <span class="kd">extends</span> <span class="n">상위타입</span><span class="o">&gt;</span> <span class="n">리턴타입</span> <span class="n">메소드</span><span class="o">(</span><span class="n">매개변수</span><span class="o">,</span> <span class="o">...){...}</span>
<span class="kd">public</span> <span class="o">&lt;</span><span class="no">T</span> <span class="kd">extends</span> <span class="nc">Number</span><span class="o">&gt;</span> <span class="kt">int</span> <span class="nf">compare</span><span class="o">(</span><span class="no">T</span> <span class="n">t1</span><span class="o">,</span> <span class="no">T</span> <span class="n">t2</span><span class="o">)</span> <span class="o">{...}</span>
</code></pre></div></div>

<p>와일드카드 타입(&lt;?&gt;, &lt;? extends …&gt;,&lt;? super …&gt;)</p>

<ol>
  <li>&lt;?&gt; : Unbounded Wildcards(제한 없음)</li>
  <li>&lt;? extends 상위타입&gt; : Upper Bounded WildCards(상위 클래스 제한)</li>
  <li>&lt;? super 하위타입&gt; : Lower Bounded WildCards(하위 클래스 제한)</li>
</ol>

<p>예시</p>

<p><img src="/assets/Generic.png" alt="Generic" /></p>

<ol>
  <li>Course&lt;?&gt; : 수강생은 모든 타입(Person, Worker, Student, HighStudent) 가능</li>
  <li>Course&lt;? extends Student&gt; : 수강생은 Student와 HighStudent만 가능(Student이하 아래 모든 하위클래스)</li>
  <li>Course&lt;? super Worker&gt; : 수강생은 Worker와 Person만 가능(Worker 클래스와 Worker 클래스가 상속하는 모든 타입)</li>
</ol>

<p>위와 관련한 모든 예제들은 아래 링크 주소에 있으니 참고해주시면 감사하겠습니다.<br />
<a href="https://github.com/goodgood619/ThisIsJava">https://github.com/goodgood619/ThisIsJava</a></p>
:ET